#!/usr/bin/env Rscript

library(tdmsreader)
library(ggplot2)
library(reshape2)
library(data.table)

suppressPackageStartupMessages(library('optparse'))
parser <- OptionParser()
parser <- add_option(parser, c('-f', '--file'), help='TDMS/Peak file table')
parser <- add_option(parser, c('-c', '--channel'), default = "/'Untitled'/'Dev1/ai0'", help='Channel name')
parser <- add_option(parser, c('-w', '--window'), default = 0.005, type = 'double', help='Window size around peak value')
parser <- add_option(parser, c('-v', '--verbose'), default=F, type="logical", action="store_true", help='Print verbose output')
parser <- add_option(parser, c('-b', '--prebaseline'), default=F, dest='preBaselineSubtract', type = 'logical', action="store_true", help='Pre-normalization baseline subtract')
parser <- add_option(parser, c('-d', '--postbaseline'), default=F, dest='postBaselineSubtract', type = 'logical', action="store_true", help='Post-normalization baseline subtract')
parser <- add_option(parser, c('-n', '--normalize'), default=F, type = 'logical', action="store_true", help='Normalize waveform between 0-1 peak to peak height')
parser <- add_option(parser, c('-a', '--alpha'), default=0.05, type = 'double', help='Transparency factor aka alpha channel for plotting EODs')
parser <- add_option(parser, c('-p', '--pdf'), default=F, type="logical", action="store_true", help='Use PDF output')

options = commandArgs(trailingOnly = TRUE)
opts = parse_args(parser, args = options)

if (is.null(opts$file)) {
    print_help(parser)
}

if (!file.exists(opts$file)) {
    stop('TDMS file not found')
}
peaksets = fread(opts$file, stringsAsFactors=F)
totalplotdata = lapply(1:nrow(peaksets), function(i) {
    f = peaksets[i,1][[1]]
    p = peaksets[i,2][[1]]
    m = file(f, 'rb')
    main = TdmsFile$new(m)
    r = main$objects[[opts$channel]]
    if(is.null(r)) {
        stop('Channel not found')
    }
    inc = r$properties[['wf_increment']]
    max = r$number_values * inc
    main$read_data(m, 0, max)
    close(m)

    if(opts$verbose) {
        print(paste0('gathering peak data...', f))
    }
    peaks = read.table(p, sep='\t',stringsAsFactors=F)
    if(nrow(peaks)>0) {
        do.call(rbind, apply(peaks, 1, function(row) {
            start = as.numeric(row[[1]])
            s = start - opts$window / 2
            e = start + opts$window / 2
            sp = s/inc
            ep = e/inc
            dat = r$data[sp:ep]
            t = seq(s, e, by = inc) - s
            t = t[1:length(dat)]
            if(row[[2]] == '-') {
                dat = -dat
            }
            if(opts$preBaselineSubtract) {
                dat = dat - mean(dat[1:25])
            }
            if(opts$normalize) {
                dat = (dat - min(dat)) / (max(dat) - min(dat))
            }
            if(opts$postBaselineSubtract) {
                dat = dat - mean(dat[1:25])
            }
            # rounding important here to avoid different values being collapsed. significant digits may change on sampling rate of tdms
            data.frame(col = start, time = round(t, digits=5), data = dat, filename = basename(f))
        }))
    } else {
        data.frame(col = numeric(0), time = numeric(0), data = numeric(0), filename = character(0))
    }
})




if(opts$verbose) {
    print('plotting average peak...')
}

totalplotdata = do.call(rbind, totalplotdata)

if(opts$pdf) {
    pdf('alltdms.average.pdf', width=20,height=9)
} else {
    png('alltdms.average.png', width=2000, height=900)
}
myplot = ggplot(data=totalplotdata, aes(x=time, y=data, color = filename, group = filename)) + stat_summary(aes(y = data), fun.y=mean, geom='line')
myplot + ggtitle('Averaged peak data')
invisible(dev.off())


if(opts$verbose) {
    print('plotting total peak...')
}
if(opts$pdf) {
    pdf('alltdms.all.pdf', width=20,height=9)
} else {
    png('alltdms.all.png', width=2000, height=900)
}
myplot2 = ggplot(data=totalplotdata, aes(x=time, y=data, group = col, color=filename)) + geom_line(alpha=opts$alpha) + guides(colour = guide_legend(override.aes = list(alpha=1)))
myplot2 + ggtitle('Total peak data')
invisible(dev.off())

