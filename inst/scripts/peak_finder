#!/usr/bin/env Rscript

library(tdmsreader)
suppressPackageStartupMessages(library('optparse'))
parser <- OptionParser()
parser <- add_option(parser, c('-f', '--file'), help='TDMS file input')
parser <- add_option(parser, c('-v', '--verbose'), default=F, type="logical", action="store_true", help='Print verbose output')
parser <- add_option(parser, c('-c', '--channel'), default="/'Untitled'/'Dev1/ai0'", help='Channel name')
parser <- add_option(parser, c('-t', '--type'), default="sigma", help='Peak finder type, cutoff or sigma')
parser <- add_option(parser, c('-n', '--number'), type="double", default=5, help='Peak finder threshold, sigma or voltage threshold')
parser <- add_option(parser, c('-d', '--direction'), default = "none", help='Direction, enter either positive/negative/none')
parser <- add_option(parser, c('-r', '--remove'), default = 0, type="double", help="Amount to remove from start/end of recording")

options = commandArgs(trailingOnly = TRUE)
opts = parse_args(parser, args = options)

if (is.null(opts$file)) {
    print_help(parser)
}

if (!file.exists(opts$file)) {
    stop('TDMS file not found')
}
m = file(opts$file, 'rb')
main = TdmsFile$new(m)

r = main$objects[[opts$channel]]
if(is.null(r)) {
    stop('Channel not found')
}
total_vals = r$number_values * r$properties[['wf_increment']]
e = total_vals - opts$remove
s = opts$remove

main$read_data(m, s, e)
t = r$time_track(start = s, end = e)
dat = r$data
close(m)

mysd = sd(dat)
mymean = mean(dat)
currTime = 0

if(opts$direction == 'none' & opts$type == 'volts') {
    stop('Need to specify direction if using voltage cutoff')
}


peaks = data.frame(peaks=numeric(), direction=character())
for(i in seq(1,length(dat),by=3)) {
    ns = max(i - 1000,1)
    ne = i + 1000
    loc_max = which.max(dat[ns:ne])
    loc_min = which.min(dat[ns:ne])
    
    if(opts$verbose & i%%100000==0) {
        print(sprintf("%f%%",100*i/length(dat)))
    }
    if(t[i] - currTime > 0.001) {
        if(dat[i] > mymean + mysd * opts$number) {
            #print(sprintf('found %f %f',t[loc_max],t[loc_min]))
            if(loc_min>=loc_max) {
                peaks = rbind(peaks, data.frame(peaks=t[ns + loc_max], direction='+'))
                currTime = t[i]
            }
        } else if(dat[i] < mymean - mysd * opts$number) {
            if(loc_max>=loc_min) {
                peaks = rbind(peaks, data.frame(peaks=t[ns + loc_min], direction='-'))
                currTime = t[i]
            }
        }
    }
}
if(nrow(peaks)==0) {
    print(sprintf('No peaks found in %s', basename(opts$file)))
}
write.table(peaks, file=paste0(basename(opts$file),'.peaks.csv'), quote=F, row.names=F, sep='\t', col.names=F)

